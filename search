#!/usr/bin/env python3

# Imports
import time, math, psutil
from pydoc import pager
import multiprocessing
Process = multiprocessing.Process
SimpleQueue = multiprocessing.SimpleQueue

# Jamming
from libjam import captain, drawer, typewriter, clipboard

# funky vars
platform = drawer.get_platform()
cpu_freq = int(psutil.cpu_freq()[2])
cpu_cores = multiprocessing.cpu_count()

# Helper functions
def get_elapsed_time(start_time, end_time):
  elapsed = end_time - start_time
  if elapsed >= 10:
    elapsed = round(elapsed, 1)
  else:
    elapsed = round(elapsed, 2)
  return elapsed

def to_chunks(list_lenght):
  chunks = []
  chunk_size = math.floor(list_lenght / cpu_cores)
  for core in range(cpu_cores):
    chunk_start = core * chunk_size
    if core == cpu_cores:
      chunk_end = num_of_files - 1
    else:
      chunk_end = chunk_start + chunk_size
    chunks.append((chunk_start, chunk_end))
  return (chunks, chunk_size)

def check_path(path):
  if not drawer.exists(path):
    print(f"Folder at '{path}' does not exist.")
    exit()
  if drawer.is_file(path):
    print(f"Path '{path}' leads to a file.")
    exit()

class CLI:
  
  def get_files(self, path, queue=None):
    if options.get('dirs'):
      files = drawer.get_folders_recursive(path)
    else:
      files = drawer.get_files_recursive(path)
    if queue is None:
      return files
    else:
      queue.put(files)

  def get_files_threaded(self, path):
    folders = drawer.get_folders(path)
    files = []
    if options.get('dirs'):
      files += folders
    else:
      files += drawer.get_files(path)
    processes = []
    queue = SimpleQueue()
    for folder in folders:
      process = Process(target=self.get_files, args=(folder, queue))
      process.start()
      processes.append(process)
    iteration = 0
    for process in processes:
      if not options.get('quiet'):
        typewriter.print_progress('Gathering', iteration, len(processes))
      files += queue.get()
      iteration += 1
    for process in processes:
      process.join()
    queue.close()
    return files

  def find_files(self, files, search_term, queue=None):
    # Setting current core so it it doesn't bounce around cores wasting time
    current_process = psutil.Process()
    current_core = current_process.cpu_affinity()
    current_process.cpu_affinity(current_core)
    # Searching
    matching_files = []
    num_of_files = len(files)
    iteration = 0
    for file in files:
      eval_string = f"search_term"
      if not options.get('case'):
        eval_string += '.lower()'
      if options.get('full-path'):
        if options.get('case'):
          eval_string = f"file.endswith({eval_string})"
        else:
          eval_string = f"file.lower().endswith({eval_string})"
      else:
        if options.get('case'):
          eval_string += f" in file"
        else:
          eval_string += f" in file.lower()"
      if eval(eval_string):
        matching_files.append(file)
      iteration += 1
      if (not options.get('quiet')) and (queue is None) and (num_of_files < 1000):
        typewriter.print_progress('Searching', iteration, num_of_files)
    if queue is None:
      return sorted(matching_files)
    else:
      queue.put(matching_files)

  def find_files_threaded(self, files, search_term):
    matching_files, processes = [], []
    queue = SimpleQueue()
    chunks, chunk_size = to_chunks(len(files))
    for chunk in chunks:
      start, end = chunk
      subfiles = files[start:end]
      process = Process(target=self.find_files, args=(subfiles, search_term, queue))
      process.start()
      processes.append(process)
    iteration = 0
    for process in processes:
      if not options.get('quiet'):
        typewriter.print_progress('Searching', iteration * chunk_size, cpu_cores * chunk_size)
      matching_files += queue.get()
      iteration += 1
    for process in processes:
      process.join()
    queue.close
    return sorted(matching_files)


  def get_files_wrapper(self, path):
    start_time = time.time()
    check_path(path)
    if not options.get('quiet'):
      typewriter.print_status('Gathering files...')
    if platform == 'Windows':
      print("Warning: Multithreading not supported on Windows.")
      files = self.get_files(path)
    else:
      files = self.get_files_threaded(path)
    if len(files) == 0:
      typewriter.print(f"No files found in '{path}'")
      exit()
    end_time = time.time()
    get_elapsed_time(start_time, end_time)
    elapsed = get_elapsed_time(start_time, end_time)
    if not options.get('quiet'):
      typewriter.print(f"Found {len(files):,} files in {elapsed}s.")
    return files

  def search(self, args, options):
    search_term, path = args
    files = self.get_files_wrapper(path)
    start_time = time.time()
    if not options.get('quiet'):
      typewriter.print_status('Searching...')
    if (len(files) < cpu_freq) or platform == 'Windows':
      matching_files = self.find_files(files, search_term)
    else:
      matching_files = self.find_files_threaded(files, search_term)
    end_time = time.time()
    elapsed = get_elapsed_time(start_time, end_time)
    if not options.get('quiet'):
      typewriter.print(f"Found {len(matching_files):,} matches in {elapsed}s.")
    if len(matching_files) == 0:
      return
    columns = typewriter.list_to_columns(matching_files)
    if len(matching_files) > 50:
      pager(columns)
    else:
      typewriter.print(columns)

  def count(self, path, options):
    files = self.get_files_wrapper(path)
    if options.get('quiet'):
      typewriter.print(f"{len(files):,}")

cli = CLI()

# Inputs/Commands/Options configuration
description = "An easy way to find a file you need"
commands = {
  'for': {
    'function': cli.search,
    'arguments': ['search-term', 'path'],
    'description': 'Searches for given file in given directory',
  },
  'count': {
    'function': cli.count,
    'arguments': ['path'],
    'description': 'Shows how many files are in a given directory',
  },
}
options = {
  'full-path': {
    'long': ['full-path'], 'short': ['f'],
    'description': "Search the full path instead of just the file's basename",
  },
  'dirs': {
    'long': ['dirs'], 'short': ['d'],
    'description': 'Search for directories instead of files',
  },
  'case': {
    'long': ['case-sensetive'], 'short': ['c'],
    'description': 'Makes searching case sensitive',
  },
  'quiet': {
    'long': ['quiet'], 'short': ['q'],
    'description': "Don't show progress bars and stats",
  },
}

# Running
function, arguments, options = captain.sail(description, commands, options)
try:
  function(arguments, options)
except KeyboardInterrupt:
  typewriter.clear_lines(0)
  print('Operation cancelled.', end='')
